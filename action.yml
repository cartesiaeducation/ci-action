name: 'Deploy Action'
description: 'A reusable GitHub Action for executing tests.'
inputs:
  slack_bot_token:
    description: 'Slack bot token'
    required: true
  slack_channel_id:
    description: 'Slack notification channel ID'
    required: true
  ssh_private_key:
    description: 'SSH private key'
    required: true
  git_organization:
    description: 'Git organization'
    required: true
  git_token:
    description: 'Git token'
    required: true
  admin_domain:
    description: 'Organization admin domain'
    required: true
  corporate_domain:
    description: 'Organization corporate domain'
    required: true
  phpunit:
    description: 'Execute phpunit tests'
    required: false
    default: 'false'
  behat:
    description: 'Execute behat tests'
    required: false
    default: 'false'
  jest:
    description: 'Execute jest tests'
    required: false
    default: 'false'
  nb_workers:
    description: 'Number of workers'
    required: false
  custom_env:
    description: 'Custom environment variables as key=value pairs'
    required: false
  jest_command:
    description: 'Custom Jest command'
    required: false
    default: 'npm run test --runInBand --silent'
  ip_recette:
    description: 'IP address for the recette environment'
    required: false
  ip_demo:
    description: 'IP address for the demo environment'
    required: false
  ip_prod:
    description: 'IP address for the prod environment'
    required: false
  transfer_assets:
    description: 'Transfer server assets'
    required: false
    default: 'true'
  

runs:
  using: 'composite'
  steps:
    - id: slack
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/optimDeploy'
      uses: slackapi/slack-github-action@v1.25.0
      env:
        SLACK_BOT_TOKEN: ${{ inputs.slack_bot_token }}
      with:
        channel-id: ${{ inputs.slack_channel_id }}
        payload: |
          {
            "text": "<https://github.com/${{ github.repository }}|${{ github.repository }}> : Build started in branch `${{ github.ref_name }}` (In Progress) - Build Link: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Click here for build details>",
            "attachments": [
              {
                "pretext": "Build started",
                "color": "dbab09",
                "fields": [
                  {
                    "title": "Status",
                    "short": true,
                    "value": "In Progress"
                  }
                ]
              }
            ]
          }
          
    - name: Get CPU cores count
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/optimDeploy'
      id: cpu_cores
      run: |
        if [ -n "${{ inputs.nb_workers }}" ]; then
          echo "::set-output name=cores::${{ inputs.nb_workers }}"
        else
          echo "::set-output name=cores::$(nproc)"
        fi
      shell: bash
          
    - name: Login to Docker
      run: echo "${{ inputs.git_token }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
      shell: bash
      
    # —— Setup Github actions 🐙 ————————————————————————————————————————————————
    # https://github.com/actions/checkout (official)
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Mount project
      shell: bash
      run: |
        CUSTOM_ENV_VARS=$(echo '${{ inputs.custom_env }}' | jq -r 'to_entries|map("export \(.key)=\(.value|tostring)")|.[]')
        eval "$CUSTOM_ENV_VARS"
        DEPENDENCIES_BRANCH=$(echo ${GITHUB_REF#refs/heads/}) \
        SSH_PRIVATE_KEY="${{ inputs.ssh_private_key }}" \
        CR_PAT="${{ inputs.git_token }}" \
        ADMIN_DOMAIN="${{ inputs.admin_domain }}" \
        CORPORATE_DOMAIN="${{ inputs.corporate_domain }}" \
        GIT_ORGANIZATION="${{ inputs.git_organization }}" \
        SLACK_TOKEN="${{ inputs.slack_bot_token }}" \
        IS_CI="true" \
        SLACK_NOTIFICATION_TS="${{ steps.slack.outputs.ts }}" \
        docker compose -f docker-compose-ci.yml up -d
        
    - name: Install dependencies
      shell: bash
      run: |
        docker exec -u www-data web bash install-dependencies.sh
        
    - name: Build test environment
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'
      shell: bash
      run: |
        docker exec -e NB_WORKERS=${{ steps.cpu_cores.outputs.cores }} -u www-data web bash ci.sh
    
    - name: PHPUnit
      id: phpunit
      uses: nick-fields/retry@v3
      if: inputs.phpunit == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/optimDeploy')
      with:
        timeout_minutes: 15
        max_attempts: 2
        command: docker exec -u www-data web bash -c "SYMFONY_DEPRECATIONS_HELPER=weak ./vendor/bin/paratest -p ${{ steps.cpu_cores.outputs.cores }} --runner=WrapperRunner --stop-on-failure"
    
    - name: Jest
      id: jest
      uses: nick-fields/retry@v3
      if: inputs.jest == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/optimDeploy')
      with:
        timeout_minutes: 15
        max_attempts: 2
        command: docker exec -u www-data web bash -c "${{ inputs.jest_command }}"
        
    - name: Behat
      id: behat
      uses: nick-fields/retry@v3
      if: inputs.behat == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/optimDeploy')
      with:
        timeout_minutes: 15
        max_attempts: 2
        command: docker exec -u www-data web bash -c "./vendor/bin/behat -l ${{ steps.cpu_cores.outputs.cores }} --suite=default --stop-on-failure"
    
    - name: Set test_success output
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/optimDeploy'
      id: set_test_success_output
      run: |
        if [[ "${{ inputs.behat }}" == "false" || "${{ steps.behat.outcome }}" == "success" ]] &&
           [[ "${{ inputs.phpunit }}" == "false" || "${{ steps.phpunit.outcome }}" == "success" ]] &&
           [[ "${{ inputs.jest }}" == "false" || "${{ steps.jest.outcome }}" == "success" ]]
        then
          echo "::set-output name=test_success::success"
        else
          echo "::set-output name=test_success::failure"
        fi
      shell: bash
      
    - name: Build server assets
      if: success() && inputs.transfer_assets
      shell: bash
      run: |
        docker exec -u www-data web bash build-server-assets.sh
      
    - name: Copy public/dist from container to host
      if: success() && inputs.transfer_assets
      run: |
        PROJECT_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        docker cp web:/var/www/$PROJECT_NAME/public/dist ./public-dist-${{ github.sha }}
      shell: bash
      
    - name: Setup SSH Keys
      if: success() && inputs.transfer_assets
      uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ inputs.ssh_private_key }}
#
    - name: Transfer artifact to the recette
      if: success() && (startsWith(github.ref, 'refs/heads/release-') || github.ref == 'refs/heads/optimDeploy') && inputs.ip_recette && inputs.transfer_assets
      run: |
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        ssh-keyscan -H ${{ inputs.ip_recette }} >> ~/.ssh/known_hosts
        rsync -avz --delete ./public-dist-${{ github.sha }} www-data@${{ inputs.ip_recette }}:/var/www/$REPO_NAME/tmp
      shell: bash

    - name: Transfer artifact to the demo
      if: success() && github.ref == 'refs/heads/master' && inputs.ip_demo && inputs.transfer_assets
      run: |
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        ssh-keyscan -H ${{ inputs.ip_demo }} >> ~/.ssh/known_hosts
        rsync -avz --delete ./public-dist-${{ github.sha }} www-data@${{ inputs.ip_demo }}:/var/www/$REPO_NAME/tmp
      shell: bash

    - name: Transfer artifact to the prod
      if: success() && github.ref == 'refs/heads/master' && inputs.ip_prod && inputs.transfer_assets
      run: |
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        ssh-keyscan -H ${{ inputs.ip_prod }} >> ~/.ssh/known_hosts
        rsync -avz --delete ./public-dist-${{ github.sha }} www-data@${{ inputs.ip_prod }}:/var/www/$REPO_NAME/tmp
      shell: bash
    
    - name: Dispatch deploy master
      if: success() && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-') || github.ref == 'refs/heads/optimDeploy')
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ inputs.git_token }}
        repository: ${{ github.repository }}
        event-type: deploy-master
        client-payload: |
          {
            "branch": "${{ github.ref }}"
          }
    
    
    
    - uses: slackapi/slack-github-action@v1.25.0
      if: always() && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/optimDeploy')
      with:
        # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
        channel-id: ${{ inputs.slack_channel_id }}
        # For posting a simple plain text message
        update-ts: ${{ steps.slack.outputs.ts }}
        payload: |
          {
            "text": "Repository: <https://github.com/${{ github.repository }}|${{ github.repository }}> - Build Status in branch `${{ github.ref_name }}`: ${{ steps.set_test_success_output.outputs.test_success }} - Build Link: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Click here for build details>",
            "attachments": [
              {
                "pretext": "Build Status: ${{ steps.set_test_success_output.outputs.test_success }}",
                "color": "${{ steps.set_test_success_output.outputs.test_success == 'success' && '28a745' || 'ff0000' }}",
                "fields": [
                  {
                    "title": "Status",
                    "short": true,
                    "value": "${{ steps.set_test_success_output.outputs.test_success == 'success' && 'Completed' || 'Failure' }}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_BOT_TOKEN: ${{ inputs.slack_bot_token }}